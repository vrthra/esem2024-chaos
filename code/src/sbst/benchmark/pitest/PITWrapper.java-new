package sbst.benchmark.pitest;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.logging.Level;

import org.pitest.classinfo.ClassByteArraySource;
import org.pitest.classinfo.ClassName;
import org.pitest.classpath.ClassPath;
import org.pitest.classpath.ClassPathByteArraySource;
import org.pitest.classpath.ClassloaderByteArraySource;
import org.pitest.classpath.CodeSource;
import org.pitest.classpath.ProjectClassPaths;
import org.pitest.coverage.CoverageDatabase;
import org.pitest.coverage.CoverageGenerator;
import org.pitest.coverage.TestInfo;
import org.pitest.coverage.execute.CoverageOptions;
import org.pitest.coverage.execute.DefaultCoverageGenerator;
import org.pitest.functional.SideEffect1;
import org.pitest.mutationtest.EngineArguments;
import org.pitest.mutationtest.HistoryStore;
import org.pitest.mutationtest.MutationAnalyser;
import org.pitest.mutationtest.MutationConfig;
import org.pitest.mutationtest.MutationResultListener;
import org.pitest.mutationtest.MutationResultListenerFactory;
import org.pitest.mutationtest.build.MutationInterceptor;
import org.pitest.mutationtest.build.MutationSource;
import org.pitest.mutationtest.build.TestPrioritiser;
import org.pitest.mutationtest.commandline.OptionsParser;
import org.pitest.mutationtest.commandline.ParseResult;
import org.pitest.mutationtest.commandline.PluginFilter;
import org.pitest.mutationtest.config.PluginServices;
import org.pitest.mutationtest.config.ReportOptions;
import org.pitest.mutationtest.config.SettingsFactory;
import org.pitest.mutationtest.engine.Mutater;
import org.pitest.mutationtest.engine.MutationDetails;
import org.pitest.mutationtest.engine.MutationEngine;
import org.pitest.mutationtest.engine.MutationIdentifier;
import org.pitest.mutationtest.incremental.DefaultCodeHistory;
import org.pitest.mutationtest.incremental.IncrementalAnalyser;
import org.pitest.mutationtest.incremental.ObjectOutputStreamHistoryStore;
import org.pitest.mutationtest.incremental.WriterFactory;
import org.pitest.mutationtest.statistics.MutationStatisticsListener;
import org.pitest.mutationtest.tooling.AnalysisResult;
import org.pitest.mutationtest.tooling.CombinedStatistics;
import org.pitest.mutationtest.tooling.JarCreatingJarFinder;
import org.pitest.mutationtest.tooling.KnownLocationJavaAgentFinder;
import org.pitest.mutationtest.tooling.MutationCoverage;
import org.pitest.mutationtest.tooling.MutationStrategies;
import org.pitest.plugin.Feature;
import org.pitest.plugin.FeatureParameter;
import org.pitest.process.JavaAgent;
import org.pitest.process.LaunchOptions;
import org.pitest.util.Log;
import org.pitest.util.ResultOutputStrategy;
import org.pitest.util.Timings;

import edu.emory.mathcs.backport.java.util.Collections;
import sbst.benchmark.Main;
import sbst.benchmark.coverage.TestUtil;

public class PITWrapper {
    private MutationSet generatedMutants;

    private SideEffect1<Feature> asInfo(final String leader) {
        return a -> {
            Log.getLogger().info(String.format("%1$-16s", leader + a.name()) + a.description());
            for (final FeatureParameter each : a.params()) {
                Log.getLogger().info(String.format("%1$-18s", "  [" + each.name() + "]") + each.description());
            }
        };
    }

    // For reasons not yet understood classes from rt.jar are not resolved for some
    // projects during static analysis phase. For now fall back to the classloader
    // when
    // a class not provided by project classpath
    private ClassByteArraySource fallbackToClassLoader(final ClassByteArraySource bas) {
        final ClassByteArraySource clSource = ClassloaderByteArraySource.fromContext();
        return clazz -> {
            final Optional<byte[]> maybeBytes = bas.getBytes(clazz);
            if (maybeBytes.isPresent()) {
                return maybeBytes;
            }
//        LOG.log(Level.FINE, "Could not find " + clazz + " on classpath for analysis. Falling back to classloader");
            return clSource.getBytes(clazz);
        };
    }

    public PITWrapper(String pClassPath, String pClassToMutate, List<String> pTargetTest) {

        String testList = pTargetTest.get(0);
        for (int index = 1; index < pTargetTest.size(); index++) {
            testList = testList + "," + (String) pTargetTest.get(index);
        }

        // Diverse inputs jere
        String[] args4Pit = { //
                "--classPath", pClassPath, "--targetClasses", pClassToMutate, "--targetTests", testList,
                // sourceDirs are mandatory but we never used them?
                // TODO Not sure how to set this ...
                "--sourceDirs", "src/main/java", "--reportDir", "pitestReports",
                // Those are other parameters that should not matter, but apparently they do
                "--jvmArgs", "-Dsandbox=true", //
                "--jvmArgs", "-Duse_separate_classloader=false", //
                "--jvmArgs", "-Djava.security.debug=access", //
//                "--outputFormats=XML", //
//                "--timestampedReports=false", //
//                "--fullMutationMatrix=true" 
        };

        final PluginServices plugins = PluginServices.makeForContextLoader();
//        PluginServices plugins = new PluginServices(getClass().getClassLoader());

        OptionsParser parser = new OptionsParser((Predicate) new PluginFilter(plugins));
        ParseResult pr = parser.parse(args4Pit);
        ReportOptions options = pr.getOptions();

        System.out.println("PITWrapper.PITWrapper() " + options.getReportDir());

        // TODO: For some reason, in commons-io and a few other projects, the line
        // numbers/blocks/indexes reported by PIT ran as below, do not match the ones in
        // the XML and the ones reported by JaCoCo
        // The suspect is that PITest changes the byte to enable some mutations: negated
        // conditions, removal of something
        //
        final SettingsFactory settings = new SettingsFactory(options, plugins);
//        Log.getLogger().info("---------------------------------------------------------------------------");
//        Log.getLogger().info("Enabled (+) and disabled (-) features.");
//        Log.getLogger().info("-----------------------------------------");
//        settings.describeFeatures(asInfo("+"), asInfo("-"));
//        Log.getLogger().info("---------------------------------------------------------------------------");

        final ClassPath cp = options.getClassPath();

//        final Optional<Reader> reader = data.createHistoryReader();
//      final WriterFactory historyWriter = data.createHistoryWriter();
        final HistoryStore history = null;
        final CoverageGenerator coverage = null;

        final JavaAgent jac = new JarCreatingJarFinder(new ClassPathByteArraySource(cp));
        final KnownLocationJavaAgentFinder ja = new KnownLocationJavaAgentFinder(jac.getJarLocation().get());

        final ResultOutputStrategy reportOutput = settings.getOutputStrategy();
        final MutationResultListenerFactory reportFactory = settings.createListener();
        final CoverageOptions coverageOptions = settings.createCoverageOptions();

        // TODO Not sure what to do here....
        Map<String, String> environmentVariables = new HashMap<String, String>();
        final LaunchOptions launchOptions = new LaunchOptions(ja, settings.getJavaExecutable(), options.getJvmArgs(),
                environmentVariables).usingClassPathJar(options.useClasspathJar());
        // This smells
        final ProjectClassPaths cps = options.getMutationClassPaths();
        final CodeSource code = new CodeSource(cps);

        final Timings timings = new Timings();
        //
        File baseDir = null;

        final CoverageGenerator coverageDatabase = new DefaultCoverageGenerator(baseDir, coverageOptions, launchOptions,
                code, settings.createCoverageExporter(), timings, !options.isVerbose());

//        final HistoryStore history = new ObjectOutputStreamHistoryStore(historyWriter, reader);

        final MutationStrategies strategies = new MutationStrategies(settings.createEngine(), history, coverageDatabase,
                reportFactory, reportOutput);

//        final MutationCoverage report = new MutationCoverage(strategies, baseDir, code, options, settings, timings);

//        CombinedStatistics runReport = report.runReport();

        final Runtime runtime = Runtime.getRuntime();

//        verifyBuildSuitableForMutationTesting();

//        checkExcludedRunners();

        System.out.println("PITWrapper.PITWrapper() Calculate coverage start");
        final CoverageDatabase coverageData = strategies.coverage().calculateCoverage();
        System.out.println("PITWrapper.PITWrapper() Calculate coverage ends");
        
        final EngineArguments args = EngineArguments.arguments().withExcludedMethods(options.getExcludedMethods())
                .withMutators(options.getMutators());
        final MutationEngine engine = strategies.factory().createEngine(args);

        final long t0 = System.currentTimeMillis();
        final MutationStatisticsListener stats = new MutationStatisticsListener();
        //

//        final List<MutationResultListener> config = createConfig(t0, coverageData, stats, engine);

        final MutationConfig mutationConfig = new MutationConfig(engine, strategies.coverage().getLaunchOptions());

        final ClassByteArraySource bas = fallbackToClassLoader(new ClassPathByteArraySource(options.getClassPath()));
        final ClassByteArraySource classloaderByteArraySource = bas;

//            final TestPrioritiser testPrioritiser = settings.getTestPrioritiser()
//                .makeTestPrioritiser(options.getFreeFormProperties(), this.code,
//                    coverageData);

        final MutationInterceptor interceptor = settings.getInterceptor().createInterceptor(options, bas);

//        final MutationSource source = new MutationSource(mutationConfig, testPrioritiser, bas, interceptor);

//            final MutationAnalyser analyser = new IncrementalAnalyser(
//                new DefaultCodeHistory(this.code, history()), coverageData);

        /// THIS IS OUR OLD CODE

        final MutationResultListenerFactory listenerFactory = null;
        final ResultOutputStrategy output = null;

        // This is taken from PITest command line
//        final MutationStrategies strategies = new MutationStrategies(settings.createEngine(), history, coverage,
//                listenerFactory, output);

//        final EngineArguments args = EngineArguments.arguments().withExcludedMethods(options.getExcludedMethods())
//                .withMutators(options.getMutators());
//        final MutationEngine engine = strategies.factory().createEngine(args);

        int count = 0;

        try {
//            URL[] urls = TestUtil.createURLs(pClassPath);
//            URLClassLoader cl = URLClassLoader.newInstance(urls, getClass().getClassLoader());
//
//            ClassloaderByteArraySource classloaderByteArraySource = new ClassloaderByteArraySource(cl);

            Mutater mutater = engine.createMutator((ClassByteArraySource) classloaderByteArraySource);

            ClassName classToMutate = ClassName.fromString(pClassToMutate);

//            final MutationConfig mutationConfig = new MutationConfig(engine, null); // strategies.coverage().getLaunchOptions());

            // Alessio: This seems to be the culprit - Of course, if this is used we cannot
            // get the right coverage of mutants
//            final MutationInterceptor interceptor = settings.getInterceptor().createInterceptor(options,
//                    classloaderByteArraySource);

            MutationSource ms = new MutationSource(mutationConfig, new TestPrioritiser() {

                @Override
                public List<TestInfo> assignTests(MutationDetails mutation) {
                    // Execute NO test at this point...
                    return Collections.emptyList();
                }
            }, classloaderByteArraySource, interceptor);

//            List<MutationDetails> list = mutater.findMutations(classToMutate);
//            Main.info("Original Mutations " + list.size() );
            // The interceptor is the keypoint to get the same number of mutants!
            List<MutationDetails> list = new ArrayList(ms.createMutations(ClassName.fromString(pClassToMutate)));
            Main.info("Generated Mutations " + list.size());

            // DEBUG LIST THEM
            int i = 0;
            for (MutationDetails mutantDetail : list) {
                i = i + 1;
                Main.debug(i + " Mutant " + mutantDetail);
            }
            Main.debug("------------------------");

            this.generatedMutants = new MutationSet();

            for (MutationDetails mutantDetail : list) {
                count++;
                MutationIdentifier id = mutantDetail.getId();
                this.generatedMutants.addMutant(id, mutater.getMutation(id), mutantDetail);
            }

//            cl.close();
        }
//        catch (IOException e) {
//            Main.info("Exception while generating mutants " + count + " for " + pClassToMutate);
//            e.printStackTrace();
//        } 
        catch (Exception e) {
            Main.info("Exception while generating mutants " + count + " for " + pClassToMutate);
            e.printStackTrace();
        } finally {
            Main.info("Generated Mutants: " + this.generatedMutants.getNumberOfMutations() + " for " + pClassToMutate);
        }

    }

    public MutationSet getGeneratedMutants() {
        return this.generatedMutants;
    }
}
